package main

import (
	"log"
	"net/http"
	"time"
	"github.com/gomodule/redigo/redis"
    "github.com/gorilla/mux"
    "os"
    "io"
    "github.com/disintegration/imaging"
    "image"
    "image/color"
    "math/rand"
    "strconv"
)

var pool *redis.Pool
func get(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(http.StatusOK)
    w.Write([]byte(`{"message": "Status OK"}`))
}

func post(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(http.StatusCreated)
    w.Write([]byte(`{"message": "post called"}`))
}

func notFound(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(http.StatusNotFound)
    w.Write([]byte(`{"message": "not found"}`))
}

func UploadFile(w http.ResponseWriter, r *http.Request) {
    file, handler, err := r.FormFile("file")
    fileName := r.FormValue("file_name")
    if err != nil {
        panic(err)
    }
    defer file.Close()

    f, err := os.OpenFile(handler.Filename, os.O_WRONLY|os.O_CREATE, 0666)
    if err != nil {
        panic(err)
    }
    defer f.Close()
    _, _ = io.WriteString(w, "File "+fileName+" Uploaded successfully")
    _, _ = io.Copy(f, file)
    src, err := imaging.Open(handler.Filename)
    if err != nil {
    log.Fatalf("failed to open image: %v", err)
}

// Crop the original image to 300x300px size using the center anchor.
    src = imaging.CropAnchor(src, 300, 300, imaging.Center)

    // Resize the cropped image to width = 200px preserving the aspect ratio.
    src = imaging.Resize(src, 200, 0, imaging.Lanczos)

    // Create a blurred version of the image.
    img1 := imaging.Blur(src, 5)

    // Create a grayscale version of the image with higher contrast and sharpness.
    img2 := imaging.Grayscale(src)
    img2 = imaging.AdjustContrast(img2, 20)
    img2 = imaging.Sharpen(img2, 2)

    // Create an inverted version of the image.
    img3 := imaging.Invert(src)

    // Create an embossed version of the image using a convolution filter.
    img4 := imaging.Convolve3x3(
        src,
        [9]float64{
            -1, -1, 0,
            -1, 1, 1,
            0, 1, 1,
        },
        nil,
    )

    // Create a new image and paste the four produced images into it.
    dst := imaging.New(400, 400, color.NRGBA{0, 0, 0, 0})
    dst = imaging.Paste(dst, img1, image.Pt(0, 0))
    dst = imaging.Paste(dst, img2, image.Pt(0, 200))
    dst = imaging.Paste(dst, img3, image.Pt(200, 0))
    dst = imaging.Paste(dst, img4, image.Pt(200, 200))
   
    var str1 int 
    str1 = rand.Int() 
  
    var str2 string 
    str2 = "_modified.jpg"
  	concatenated := strconv.Itoa(str1) + str2
    // Save the resulting image as JPEG.
    err = imaging.Save(dst,  concatenated )
    if err != nil {
        log.Fatalf("failed to save image: %v", err)
    }
}


func main() {
	pool = &redis.Pool{
		MaxIdle:     10,
		IdleTimeout: 240 * time.Second,
		Dial: func() (redis.Conn, error) {
			return redis.Dial("tcp", "localhost:6379")
		},
	}
    r := mux.NewRouter()
    r.HandleFunc("/status", get).Methods(http.MethodGet)
    r.HandleFunc("/upload", UploadFile).Methods(http.MethodPost)
    r.HandleFunc("/", notFound)
    log.Fatal(http.ListenAndServe(":8080", r))
}
